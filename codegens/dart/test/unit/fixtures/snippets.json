{
  "Request Headers": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'my-sample-header': 'Lorem ipsum dolor sit amet',\n  'testing': ''singlequotes'',\n  'TEST': '\\\"doublequotes\\\"'\n};\n\nfinal response = await http.post(\"https://mockbin.org/request\", headers: headers);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "Request Headers (With special Characters)": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'my-sample-header': 'Lorem ipsum dolor sit amet',\n  'TEST': '@#$%^&*()',\n  'more': ',./';[]}{\\\":?><|\\\\\\\\'\n};\n\nfinal response = await http.get(\"https://postman-echo.com/headers\", headers: headers);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "Request Headers with disabled headers": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'my-sample-header': 'Lorem ipsum dolor sit amet',\n  'not-disabled-header': 'ENABLED'\n};\n\nfinal response = await http.get(\"https://postman-echo.com/headers\", headers: headers);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "GET Request with disabled query": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\n\nfinal response = await http.get(\"https://postman-echo.com/get?test=123&anotherone=232\");\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "POST form data with special characters": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar body = {\n  'pl': ''a'', \n  'qu': '\\\"b\\\"', \n  'hdjkljh': 'c', \n  'sa': 'd', \n  'Special': '!@#$%&*()^_+=`~', \n  'more': ',./';[]}{\\\":?><|\\\\\\\\' \n};\n\n\nfinal response = await http.post(\"https://postman-echo.com/post\", body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "Resolve URL (Quotes + Special Characters) Copy": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\n\nfinal response = await http.post(\"https://postman-echo.com/post?a=!@$%5E*()_-%60%2526&b=,./';%5B%5D%7D%7B%22:/?%3E%3C%7C%7C\");\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "POST Raw Text": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'text/plain'\n};\nfinal String body = '''Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.!@#\\$%^&*()+POL:},'';,[;[;''';\n\nfinal response = await http.post(\"https://postman-echo.com/post\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "POST urlencoded data": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\nvar body = {\n  { 'key': '1' },\n  { 'value': ''a'' },\n  { 'key': '2' },\n  { 'value': '\"b\"' },\n  { 'key': ''3'' },\n  { 'value': 'c' },\n  { 'key': '\"4\"' },\n  { 'value': 'd' },\n  { 'key': 'Special' },\n  { 'value': '!@#$%&*()^_=`~              ' },\n  { 'key': 'more' },\n  { 'value': ',./';[]}{\":?><|\\\\    ' }\n};\n\nfinal response = await http.post(\"https://postman-echo.com/post\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "POST json with raw": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'application/json'\n};\nfinal String body = '''{\n  \"json\": \"Test-Test!@#\\$%^&*()+POL:},'';,[;[;:>\"\n}''';\n\nfinal response = await http.post(\"https://postman-echo.com/post\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "POST javascript with raw": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'application/javascript'\n};\nfinal String body = '''var val = 6;\nconsole.log(val);''';\n\nfinal response = await http.post(\"https://postman-echo.com/post\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "Resolve URL": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\n\nfinal response = await http.post(\"https://postman-echo.com/post?a=''&b=%22%22\");\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "PUT Request": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'text/plain'\n};\nfinal String body = '''Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.\nQuisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.''';\n\nfinal response = await http.put(\"https://postman-echo.com/put\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "PATCH Request": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'text/plain'\n};\nfinal String body = '''Curabitur auctor, elit nec pulvinar porttitor, ex augue condimentum enim, eget suscipit urna felis quis neque.\nSuspendisse sit amet luctus massa, nec venenatis mi. Suspendisse tincidunt massa at nibh efficitur fringilla. Nam quis congue mi. Etiam volutpat.''';\n\nfinal response = await http.patch(\"https://postman-echo.com/patch\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "DELETE Request": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'text/plain'\n};\nfinal String body = '''Donec fermentum, nisi sed cursus eleifend, nulla tortor ultricies tellus, ut vehicula orci arcu ut velit. In volutpat egestas dapibus.\nMorbi condimentum vestibulum sapien. Etiam dignissim diam quis eros lobortis gravida vel lobortis est. Etiam gravida sed.''';\n\nfinal response = await http.delete(\"https://postman-echo.com/delete\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "OPTIONS to postman echo": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'text/plain'\n};\nfinal String body = '''Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.''';\n\nfinal response = await http.options(\"https://postman-echo.com/post\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "LINK request": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\n\nfinal response = await http.link(\"https://mockbin.org/request\");\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "UNLINK request": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'text/plain'\n};\nfinal String body = '''Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.''';\n\nfinal response = await http.unlink(\"https://mockbin.org/request\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "LOCK request": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'text/plain'\n};\nfinal String body = '''Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.''';\n\nfinal response = await http.lock(\"https://mockbin.org/request\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "UNLOCK request": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\n\nfinal response = await http.unlock(\"https://mockbin.org/request\");\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "PROPFIND request": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'text/plain'\n};\nfinal String body = '''Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.''';\n\nfinal response = await http.propfind(\"https://mockbin.org/request\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "PURGE Request": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\n\nfinal response = await http.purge(\"https://mockbin.org/request\");\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "COPY Request": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\n\nfinal response = await http.copy(\"https://mockbin.org/request\");\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "Post file": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://postman-echo.com/post\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSArray *parameters = @[\n  @{ @\"name\": @\"uohou\", @\"fileName\": @\"/Users/umesh/Desktop/Screenshot 2019-09-29 at 10.50.30 AM.png\" } \n];\n\nNSString *boundary = @\"----WebKitFormBoundary7MA4YWxkTrZu0gW\";\nNSError *error;\nNSMutableString *body = [NSMutableString string];\n\nfor (NSDictionary *param in parameters) {\n  [body appendFormat:@\"--%@\\r\\n\", boundary];\n  if (param[@\"fileName\"]) {\n    [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", param[@\"name\"], param[@\"fileName\"]];\n    [body appendFormat:@\"Content-Type: %@\\r\\n\\r\\n\", param[@\"contentType\"]];\n    [body appendFormat:@\"%@\", [NSString stringWithContentsOfFile:param[@\"fileName\"] encoding:NSUTF8StringEncoding error:&error]];\n    if (error) {\n      NSLog(@\"%@\", error);\n    }\n  } else {\n    [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", param[@\"name\"]];\n    [body appendFormat:@\"%@\", param[@\"value\"]];\n  }\n}\n[body appendFormat:@\"\\r\\n--%@--\\r\\n\", boundary];\nNSData *postData = [body dataUsingEncoding:NSUTF8StringEncoding];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
  "Post multiple files in the same parameter  via form-data": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://postman-echo.com/post\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSArray *parameters = @[\n  @{ @\"name\": @\"multiple files\", @\"fileName\": @\"/Users/shreyshah/Desktop/openapi3.json\" }, \n  @{ @\"name\": @\"multiple files\", @\"fileName\": @\"/Users/shreyshah/Desktop/openapi3.yaml\" } \n];\n\nNSString *boundary = @\"----WebKitFormBoundary7MA4YWxkTrZu0gW\";\nNSError *error;\nNSMutableString *body = [NSMutableString string];\n\nfor (NSDictionary *param in parameters) {\n  [body appendFormat:@\"--%@\\r\\n\", boundary];\n  if (param[@\"fileName\"]) {\n    [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", param[@\"name\"], param[@\"fileName\"]];\n    [body appendFormat:@\"Content-Type: %@\\r\\n\\r\\n\", param[@\"contentType\"]];\n    [body appendFormat:@\"%@\", [NSString stringWithContentsOfFile:param[@\"fileName\"] encoding:NSUTF8StringEncoding error:&error]];\n    if (error) {\n      NSLog(@\"%@\", error);\n    }\n  } else {\n    [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", param[@\"name\"]];\n    [body appendFormat:@\"%@\", param[@\"value\"]];\n  }\n}\n[body appendFormat:@\"\\r\\n--%@--\\r\\n\", boundary];\nNSData *postData = [body dataUsingEncoding:NSUTF8StringEncoding];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
  "Post a file via form-data, without file src specified": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://postman-echo.com/post\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSArray *parameters = @[\n  @{ @\"name\": @\"key\", @\"fileName\": @\"/path/to/file\" } \n];\n\nNSString *boundary = @\"----WebKitFormBoundary7MA4YWxkTrZu0gW\";\nNSError *error;\nNSMutableString *body = [NSMutableString string];\n\nfor (NSDictionary *param in parameters) {\n  [body appendFormat:@\"--%@\\r\\n\", boundary];\n  if (param[@\"fileName\"]) {\n    [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", param[@\"name\"], param[@\"fileName\"]];\n    [body appendFormat:@\"Content-Type: %@\\r\\n\\r\\n\", param[@\"contentType\"]];\n    [body appendFormat:@\"%@\", [NSString stringWithContentsOfFile:param[@\"fileName\"] encoding:NSUTF8StringEncoding error:&error]];\n    if (error) {\n      NSLog(@\"%@\", error);\n    }\n  } else {\n    [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", param[@\"name\"]];\n    [body appendFormat:@\"%@\", param[@\"value\"]];\n  }\n}\n[body appendFormat:@\"\\r\\n--%@--\\r\\n\", boundary];\nNSData *postData = [body dataUsingEncoding:NSUTF8StringEncoding];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
  "Multiple form-data fields with same names": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://postman-echo.com/post\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSArray *parameters = @[\n  @{ @\"name\": @\"key\", @\"value\": @\"value1\" }, \n  @{ @\"name\": @\"key\", @\"value\": @\"value2\" }, \n  @{ @\"name\": @\"file\", @\"fileName\": @\"/Users/shreyshah/Desktop/openapi3.json\" }, \n  @{ @\"name\": @\"file\", @\"fileName\": @\"/Users/shreyshah/Desktop/test.c\" } \n];\n\nNSString *boundary = @\"----WebKitFormBoundary7MA4YWxkTrZu0gW\";\nNSError *error;\nNSMutableString *body = [NSMutableString string];\n\nfor (NSDictionary *param in parameters) {\n  [body appendFormat:@\"--%@\\r\\n\", boundary];\n  if (param[@\"fileName\"]) {\n    [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", param[@\"name\"], param[@\"fileName\"]];\n    [body appendFormat:@\"Content-Type: %@\\r\\n\\r\\n\", param[@\"contentType\"]];\n    [body appendFormat:@\"%@\", [NSString stringWithContentsOfFile:param[@\"fileName\"] encoding:NSUTF8StringEncoding error:&error]];\n    if (error) {\n      NSLog(@\"%@\", error);\n    }\n  } else {\n    [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", param[@\"name\"]];\n    [body appendFormat:@\"%@\", param[@\"value\"]];\n  }\n}\n[body appendFormat:@\"\\r\\n--%@--\\r\\n\", boundary];\nNSData *postData = [body dataUsingEncoding:NSUTF8StringEncoding];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
  "Multiple query params with same names": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\n\nfinal response = await http.get(\"https://postman-echo.com/get?query=value1&query=value2\");\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "GraphQL query": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'application/json'\n};\nvar body = '{\"query\":\"query { post(id: 1) { id title body } }\",\"variables\":{}}';\n\nfinal response = await http.post(\"https://graphqlzero.almansi.me/api\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "POST textxml with raw": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'text/xml'\n};\nfinal String body = '''<xml>\n\tTest Test!@#\\$%^&*()+POL:},'';,[;[;\n</xml>''';\n\nfinal response = await http.post(\"https://postman-echo.com/post\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n",
  "POST texthtml with raw": "import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvar headers = {\n  'Content-Type': 'text/html'\n};\nfinal String body = '''<html>\n  Test Test !@#\\$%^&*()+POL:},'';,[;[;\n</html>''';\n\nfinal response = await http.post(\"https://postman-echo.com/post\", headers: headers, body: body);\n\nif (response.statusCode == 200) {\n  print(json.decode(response.body));\n} else {\n  print(response.reasonPhrase);\n}\n"
}
